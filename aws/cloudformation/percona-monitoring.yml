# This template is a modified version of the template generated by the ECS console cluster creation wizard.
# It creates an AWS Fargate service which runs Percona Monitoring & Management server
# https://www.percona.com/doc/percona-monitoring-and-management/2.x/setting-up/server/docker.html
# It uses an Application Load Balancer to provide SSL termination on a subdomain of .code.org
# and to receive requests from the public internet.

AWSTemplateFormatVersion: 2010-09-09
Description: Provision Percona Monitoring & Management server on ECS Fargate.
Parameters:
  BaseDomainName:
    Type: String
    Description: Base domain name to host Percona Monitoring service.
    Default: code.org
  BaseDomainNameHostedZonedID:
    Type: String
    Description: AWS Route53 Hosted Zone ID for base domain name.
    # Hosted Zone ID for the domain name code.org.
    Default: Z2LCOI49SCXUGU
  SubDomainName:
    Type: String
    Description: Sub domain name to host Percona Monitoring service.
    Default: percona-monitoring
  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
    Default: percona-monitoring
  EcsPort:
    Type: Number
    Description: Security Group port to open on ECS instances
    Default: 80
  ElbPort:
    Type: Number
    Description: Security Group port to open on ELB
    Default: 443
  SourceCidr:
    Type: String
    Description: CIDR/IP range for EcsPort and ElbPort
    Default: 0.0.0.0/0
  TargetType:
    Type: String
    Description: ALB target group target type
    Default: ip
Resources:
  Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      Name: !Sub "${SubDomainName}.${BaseDomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt EcsElasticLoadBalancer.DNSName
        # Hosted Zone ID for the AWS Elastic Load Balancer service in us-east-1
        # https://docs.aws.amazon.com/general/latest/gr/elb.html
        HostedZoneId: Z35SXDOTRQ7X7K
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${SubDomainName}.${BaseDomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${SubDomainName}.${BaseDomainName}"
          HostedZoneId: !Ref BaseDomainNameHostedZonedID
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !ImportValue VPC
      SecurityGroupIngress: 
        -
          IpProtocol: tcp
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
        -
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        -
          IpProtocol: tcp
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${EcsClusterName} - ECS SecurityGroup"
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ElbPort
          ToPort: !Ref ElbPort
          CidrIp: !Ref SourceCidr
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${EcsClusterName} - ALB SecurityGroup"
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "TargetGroup-${AWS::StackName}"
      VpcId: !ImportValue VPC
      Port: !Ref ElbPort
      TargetType: !Ref TargetType
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${EcsClusterName} - TargetGroup"
  EcsElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "ELB-${AWS::StackName}"
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !ImportValue VPC-SubnetB
        - !ImportValue VPC-SubnetC
      Scheme: internal
      Tags:
        -
          Key: Name
          Value: !Sub "ECS ${EcsClusterName} - ALB"
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EcsElasticLoadBalancer
      Port: !Ref ElbPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  ECSCluster:
    Type: AWS::ECS::Cluster
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "ECSLogGroup-${SubDomainName}"
      RetentionInDays: 14
  PerconaMonitoringTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref SubDomainName
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      TaskRoleArn: !ImportValue IAM-PerconaMonitoringRoleARN
      Cpu: 2048
      Memory: 8192
      ContainerDefinitions:
      - Name: pmm-server
        Essential: true
        Image: percona/pmm-server
        # 2 GB per monitored database server https://www.percona.com/doc/percona-monitoring-and-management/2.x/faq.html
        MemoryReservation: 2048
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Ref SubDomainName
        # TODO: Define Volume/mount mappings for persistent data storage.
        PortMappings:
        - ContainerPort: 80
  PerconaMonitoringService:
    Type: AWS::ECS::Service
    DependsOn:
    - EcsElasticLoadBalancer
    - DefaultTargetGroup
    - LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: pmm-server
        ContainerPort: 80
        TargetGroupArn: !Ref DefaultTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !ImportValue VPC-SubnetB
            - !ImportValue VPC-SubnetC
      TaskDefinition: !Ref PerconaMonitoringTaskDefinition
  HTTPErrorRateAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-LowPriority"
      AlarmDescription: Send low priority page if percent HTTP requests to this service exceeds 5%
      AlarmName: !Sub "${SubDomainName}_http_error_rate"
      ComparisonOperator: GreaterThanThreshold
      Metrics:
        - Id: total
          Label: RequestCount
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt EcsElasticLoadBalancer.LoadBalancerFullName
              MetricName: NewConnectionCount
              Namespace: 'AWS/ApplicationELB'
            Period: 300
            Stat: Sum
            Unit: Count
          ReturnData: false
        - Id: target_fail
          Label: HTTPCode_Target_5XX_Count
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt EcsElasticLoadBalancer.LoadBalancerFullName
              MetricName: HTTPCode_Target_5XX_Count
              Namespace: 'AWS/ApplicationELB'
            Period: 300
            Stat: Sum
            Unit: Count
          ReturnData: false
        - Id: elb_fail
          Label: HTTPCode_ELB_5XX_Count
          MetricStat:
            Metric:
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt EcsElasticLoadBalancer.LoadBalancerFullName
              MetricName: HTTPCode_ELB_5XX_Count
              Namespace: 'AWS/ApplicationELB'
            Period: 300
            Stat: Sum
            Unit: Count
          ReturnData: false
        - Id: fail_rate
          Label: Percent Request Failure
          Expression: '100*(elb_fail+target_fail)/total'
          ReturnData: true
      EvaluationPeriods: 5
      Threshold: 5
      TreatMissingData: missing
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        # Protect Percona Monitoring historical metrics from accidental deletion.
        Status: ENABLED
      Encrypted: true
  FileSystemMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !Ref EcsSecurityGroup
      SubnetId: !ImportValue VPC-SubnetB
Outputs:
  InternalDNSName:
    Description: Internal DNS name of the service.
    Value: !GetAtt EcsElasticLoadBalancer.DNSName
  PublicDNSName:
    Description: Public DNS name of the service.
    Value: !Sub "${SubDomainName}.${BaseDomainName}"