"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Lesson {
  id: ID!
  levels: [Level!]!
  name: String!
  position: Int!
  title: String!
}

type Level {
  id: ID!
  isBonus: Boolean!
  isConcept: Boolean!
  isUnplugged: Boolean!
  kind: String!
  title: String!
}

type LevelProgress {
  isLocked: Boolean!
  isPaired: Boolean!
  levelId: ID!
  status: String!
}

type Mutation {
  updateUser(id: ID!, input: UserInput!): UpdateUserPayload
}

type Project {
  channel: String
  name: String
  publishedAt: ISO8601DateTime
  thumbnailUrl: String
  type: String
  updatedAt: ISO8601DateTime
}

"""
The query root of this schema
"""
type Query {
  """
  Gets a level by (scriptId, levelId)
  """
  level(levelId: ID!, scriptId: ID!): Level!
  script(id: ID!): Script!

  """
  Gets a section by id
  """
  section(id: ID!): Section!

  """
  The currently signed in user. Returns null if the user is not signed in.
  """
  signedInUser: User

  """
  Gets a user by id
  """
  user(id: ID!): User!
}

type Script {
  id: ID!
  lessons: [Lesson!]!
  name: String!
}

type Section {
  code: String
  id: ID!
  loginType: String!
  name: String
  students: [User!]!
  teacher: User!
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  errors: [String!]
  user: User
}

type User {
  age: Int
  email: String
  gender: String!
  hasEverSignedIn: Boolean!
  id: ID!
  name: String!
  progress: UserProgress!
  projects: [Project!]!
  secretPicturePath: String
  secretWords: String
  sharingEnabled: Boolean!
  totalLines: Int!
  userType: String!
  username: String!
}

"""
Parameters for creating or updating a user
"""
input UserInput {
  age: Int

  """
  m/f/n/o/-
  """
  gender: String
  name: String
  sharingEnabled: Boolean
}

type UserProgress {
  levelProgress(scriptId: ID!): [LevelProgress!]!
  levelsPassed: Int!
  totalLinesOfCode: Int!
}
