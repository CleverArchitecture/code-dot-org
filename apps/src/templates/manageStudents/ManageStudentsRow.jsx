import React from 'react';
import PropTypes from 'prop-types';
import {tableLayoutStyles} from '../tables/tableConstants';
import i18n from '@cdo/locale';
import {scriptUrlForStudent} from '@cdo/apps/templates/teacherDashboard/urlHelpers';
import {studentSectionDataPropType} from './manageStudentsTypes';
import PasswordReset from './PasswordReset';
import ShowSecret from './ShowSecret';
import {SectionLoginType} from '@cdo/apps/util/sharedConstants';
import {ages} from '../AgeDropdown';
import Button from '../Button';
import {
  setIsEditingStudent,
  useEditStudent,
  StudentInputField
} from './manageStudentsClient';

const ManageStudentsRow = props => {
  return props.student.isEditing ? (
    <WriteRow {...props} />
  ) : (
    <ReadRow {...props} />
  );
};
ManageStudentsRow.propTypes = {
  student: studentSectionDataPropType.isRequired,
  sectionId: PropTypes.string.isRequired,
  loginType: PropTypes.string.isRequired
};

export default ManageStudentsRow;

const WriteRow = ({student}) => {
  const {
    studentInput,
    cancel,
    update,
    save,
    saving,
    saveError
  } = useEditStudent(student);
  return (
    <tr>
      <td>
        <input
          required
          value={studentInput.name || ''}
          style={styles.inputBox}
          onChange={e => update(StudentInputField.name, e.target.value)}
          placeholder={i18n.nameRequired()}
        />
      </td>
      <td>
        <select
          style={{width: 50}}
          value={studentInput.age || ''}
          onChange={e =>
            update(StudentInputField.age, parseInt(e.target.value))
          }
        >
          {ages.map(age => (
            <option key={age} value={age}>
              {age}
            </option>
          ))}
        </select>
      </td>
      <td>
        <select
          style={{width: 120}}
          value={studentInput.gender}
          onChange={e => update(StudentInputField.gender, e.target.value)}
        >
          {Object.keys(GENDERS).map(gender => (
            <option key={gender} value={gender}>
              {GENDERS[gender]}
            </option>
          ))}
        </select>
      </td>
      <td>{i18n.autoGenerated()}</td>
      <td>
        <Button
          __useDeprecatedTag
          onClick={save}
          color={Button.ButtonColor.orange}
          text={i18n.save()}
          disabled={!studentInput.name || saving}
          style={styles.saveButton}
        />
        <Button
          __useDeprecatedTag
          onClick={cancel}
          color={Button.ButtonColor.gray}
          text={i18n.cancel()}
          disabled={saving}
        />
        {saveError?.message}
      </td>
    </tr>
  );
};
WriteRow.propTypes = ManageStudentsRow.propTypes;

const ReadRow = ({student, sectionId, loginType}) => {
  return (
    <tr>
      <td>
        <a
          style={tableLayoutStyles.link}
          href={scriptUrlForStudent(sectionId, 'test-script', student.id)}
          target="_blank"
          rel="noopener noreferrer"
        >
          {student.name}
        </a>
        <div style={styles.details}>
          {i18n.usernameLabel() + student.username}
        </div>
        {student.email && (
          <div style={styles.details}>{i18n.emailLabel() + student.email}</div>
        )}
      </td>
      <td>{student.age}</td>
      <td>{GENDERS[student.gender]}</td>
      <td>
        <PasswordCell
          student={student}
          sectionId={sectionId}
          loginType={loginType}
        />
      </td>
      <td>
        <Button
          __useDeprecatedTag
          onClick={() => setIsEditingStudent(student, true)}
          color={Button.ButtonColor.gray}
          text={i18n.edit()}
        />
      </td>
    </tr>
  );
};
ReadRow.propTypes = ManageStudentsRow.propTypes;

const PasswordCell = ({student, sectionId, loginType}) => {
  return (
    <React.Fragment>
      {loginType === SectionLoginType.email && (
        <PasswordReset
          initialIsResetting={false}
          sectionId={sectionId}
          studentId={student.id}
          resetDisabled={student.userType === 'teacher'}
        />
      )}
      {(loginType === SectionLoginType.word ||
        loginType === SectionLoginType.picture) && (
        <ShowSecret
          initialIsShowing={false}
          secretWord={student.secretWords}
          secretPicture={student.secretPicturePath}
          loginType={loginType}
          id={student.id}
          sectionId={sectionId}
          resetDisabled={canEdit(student.userType)}
        />
      )}
    </React.Fragment>
  );
};
PasswordCell.propTypes = ManageStudentsRow.propTypes;

/**
 * Editing is disabled if the "student" in the section is a teacher
 * (e.g., their userType is 'teacher').
 */
const canEdit = userType => userType !== 'teacher';

const GENDERS = {
  '': '',
  m: i18n.genderMale(),
  f: i18n.genderFemale(),
  n: i18n.genderNonBinary(),
  o: i18n.genderNotListed()
};

const styles = {
  inputBox: {
    width: 225
  },
  details: {
    fontSize: 12
  },
  saveButton: {
    marginRight: 5
  }
};
