vcl 4.0;
import directors;
import std;

probe backend_healthcheck {
  .url = "/health_check";
  .window = 4;
  .threshold = 2;
  .initial = 2;
  .interval = 15s;
  .timeout = 10s;
}
<% %w[pegasus dashboard].each do |app| -%>
backend <%=app%>_localhost {
  .host = "127.0.0.1";
  .port = "<%= node['cdo-apps'][app]['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
  .probe = backend_healthcheck;
}
<% end -%>

sub vcl_init {
<% %w[pegasus dashboard].each do |app| -%>
  new <%=app%> = directors.round_robin();
  <%=app%>.add_backend(<%=app%>_localhost);
<% end -%>
}

# Respond to incoming requests.
sub vcl_recv
{
### HEALTH CHECKS
# TODO: Move to ELBv2 Target Group health checks.

  # Use "/varnishcheck" to determine if you are hitting a Varnish instance.
  if (req.method == "GET" && req.url ~ "^/varnishcheck$") {
    return(synth(200, "Varnish is ready."));
  }

  # Use "/health_check" to keep this instance in the load balancer.
  if (req.method == "GET" && req.url ~ "^/health_check$") {
    if (std.healthy(dashboard_localhost) && std.healthy(pegasus_localhost)) {
      return(synth(200, "Webapps are healthy."));
    } else {
      return(synth(503, "Webapps are not healthy."));
    }
  }
<% %w[pegasus dashboard].each do |app| -%>
  if (req.method == "GET" && req.url ~ "^/health_check.<%=app%>$") {
    if (std.healthy(<%=app%>_localhost)) {
      return(synth(200, "<%=app%> is healthy."));
    } else {
      return(synth(503, "<%=app%> is not healthy."));
    }
  }
<% end -%>
###

### REDIRECTS
  # TODO: Move to ELBv2 Listener Rules "redirect" action.

  if(req.http.host ~ "\.$")
  {
    /* Don't allow domain names that end in "." */
    return(synth(751, "https://" + regsub(req.http.host, "\.$","") + req.url));
  }
  else if(req.http.host ~ "^www\.")
  {
    /* Normalize domain names to the short (non www.) form. */
    return(synth(751, "https://" + regsub(req.http.host, "^www\.","") + req.url));
  }
<%
  node['cdo-varnish']['redirects'].dup.each_pair do |domain, site|
    site = "https://#{site}" unless site =~ %r[^https?://]
-%>
  else if(req.http.Host == "<%= domain %>")
  {
    return(synth(751, "<%= site %>" + req.url));
  }
<% end -%>
  # Redirect http to https
  if(req.http.X-Forwarded-Proto !~ "(?i)https") {
    return(synth(751, "https://" + req.http.host + req.url));
  }
###

# Copy Accept-Language header to X-Varnish-Accept-Language.
# TODO: Update application code to read Accept-Language instead of X-Varnish-Accept-Language.

if (req.http.Accept-Language) {
  set req.http.X-Varnish-Accept-Language = req.http.Accept-Language;
}

### PROXIES
  # Host-based backend selection.
  # TODO: Move to ELBv2 Listener Rules "forward" action, to select among multiple Target Groups.

  if(req.http.host ~ "(dashboard|studio)") {
    set req.backend_hint = dashboard.backend();
  } else {
    set req.backend_hint = pegasus.backend();
  }
###

  # Disable caching, just proxy requests to backend.
  return (pass);
}

# Handle redirects
sub vcl_synth {
  if(resp.status == 751) {
    # We use this special error status 751 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(751, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return(deliver);
  }
}
